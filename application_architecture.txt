# Evermark Development Architecture Guide (Updated)

## Updated Code Examples for Package Compatibility

### 1. Pinata Service (using @pinata/sdk ^2.1.0)

```typescript
// src/services/storage/ipfs.ts
import PinataClient from '@pinata/sdk';
import { IPFS_CONFIG } from '../../config/constants';

class IPFSService {
  private pinata: PinataClient;
  
  constructor() {
    this.pinata = new PinataClient(
      IPFS_CONFIG.PINATA_API_KEY,
      IPFS_CONFIG.PINATA_SECRET_KEY
    );
  }
  
  // Upload JSON data to IPFS
  async uploadJSON(data: any, name?: string): Promise<string> {
    try {
      const options = name ? {
        pinataMetadata: {
          name,
        },
      } : {};
      
      const result = await this.pinata.pinJSONToIPFS(data, options);
      return `ipfs://${result.IpfsHash}`;
    } catch (error: any) {
      throw new Error(`Failed to upload to IPFS: ${error.message}`);
    }
  }
  
  // Upload file to IPFS
  async uploadFile(file: File, name?: string): Promise<string> {
    try {
      // Convert File to a format Pinata can use
      const stream = file.stream();
      const buffer = await file.arrayBuffer();
      
      const options = {
        pinataMetadata: name ? { name } : undefined,
        pinataOptions: {
          cidVersion: 1 as const,
        },
      };
      
      const result = await this.pinata.pinFileToIPFS(buffer, options);
      return `ipfs://${result.IpfsHash}`;
    } catch (error: any) {
      throw new Error(`Failed to upload file to IPFS: ${error.message}`);
    }
  }
  
  // Fetch data from IPFS using fetch API (no axios needed)
  async fetchJSON<T = any>(ipfsUri: string): Promise<T> {
    try {
      const hash = this.extractHash(ipfsUri);
      const url = `${IPFS_CONFIG.GATEWAY_URL}/ipfs/${hash}`;
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return response.json();
    } catch (error: any) {
      throw new Error(`Failed to fetch from IPFS: ${error.message}`);
    }
  }
  
  // Helper to extract hash from IPFS URI
  private extractHash(ipfsUri: string): string {
    if (ipfsUri.startsWith('ipfs://')) {
      return ipfsUri.slice(7);
    }
    return ipfsUri;
  }
}

export const ipfsService = new IPFSService();
```

### 2. Blockchain Service (ethers v6 compatible)

```typescript
// src/services/blockchain/contracts.ts
import { ethers, Contract, BrowserProvider, JsonRpcProvider } from 'ethers';
import { CONTRACT_ADDRESSES, API_CONFIG } from '../../config/constants';

class ContractService {
  private provider: JsonRpcProvider;
  private contracts: Map<string, Contract> = new Map();
  
  constructor() {
    this.provider = new JsonRpcProvider(API_CONFIG.RPC_URL);
  }
  
  // Get contract instance
  private getContract(address: string, abi: any[]): Contract {
    const key = address.toLowerCase();
    
    if (!this.contracts.has(key)) {
      const contract = new Contract(address, abi, this.provider);
      this.contracts.set(key, contract);
    }
    
    return this.contracts.get(key)!;
  }
  
  // Mint evermark with ethers v6 syntax
  async mintEvermark(to: string, metadataUri: string) {
    try {
      // Get signer from browser
      const provider = new BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      
      // Get contract with signer
      const contract = this.getContract(
        CONTRACT_ADDRESSES.EVERMARK_NFT,
        EvermarkNFTABI
      );
      const contractWithSigner = contract.connect(signer);
      
      // Call mint function
      const tx = await contractWithSigner.mint(to, metadataUri);
      
      return {
        hash: tx.hash,
        wait: () => tx.wait(),
      };
    } catch (error: any) {
      throw new Error(`Failed to mint evermark: ${error.message}`);
    }
  }
}

export const contractService = new ContractService();
```

### 3. Auth Service (compatible with farcaster frame-wagmi-connector)

```typescript
// src/services/auth/wallet.ts
import { BrowserProvider } from 'ethers';

class WalletService {
  private provider: BrowserProvider | null = null;
  
  // Connect using Farcaster frame connector (handled by wagmi)
  async connect(): Promise<string> {
    if (!window.ethereum) {
      throw new Error('No wallet detected');
    }
    
    try {
      this.provider = new BrowserProvider(window.ethereum);
      
      // Request accounts
      const accounts = await this.provider.send('eth_requestAccounts', []);
      
      if (!accounts || accounts.length === 0) {
        throw new Error('No accounts found');
      }
      
      return accounts[0];
    } catch (error: any) {
      throw new Error(`Failed to connect wallet: ${error.message}`);
    }
  }
  
  // Sign message with ethers v6
  async signMessage(message: string): Promise<string> {
    if (!this.provider) {
      throw new Error('Wallet not connected');
    }
    
    try {
      const signer = await this.provider.getSigner();
      return await signer.signMessage(message);
    } catch (error: any) {
      throw new Error(`Failed to sign message: ${error.message}`);
    }
  }
}

export const walletService = new WalletService();
```

### 4. Supabase Service (v2 compatible)

```typescript
// src/services/storage/database.ts
import { createClient } from '@supabase/supabase-js';
import { API_CONFIG } from '../../config/constants';
import type { Database } from '../../types/database.types'; // You'll need to generate this

export const supabase = createClient<Database>(
  API_CONFIG.SUPABASE_URL,
  API_CONFIG.SUPABASE_ANON_KEY
);

class DatabaseService {
  async saveEvermark(evermark: any) {
    try {
      const { data, error } = await supabase
        .from('evermarks')
        .insert([{
          token_id: evermark.tokenId,
          metadata_uri: evermark.metadataUri,
          owner: evermark.owner,
          metadata: evermark.metadata,
          created_at: new Date().toISOString(),
        }])
        .select()
        .single();
      
      if (error) throw error;
      
      return this.transformDbEvermark(data);
    } catch (error: any) {
      throw new Error(`Failed to save evermark: ${error.message}`);
    }
  }
  
  private transformDbEvermark(dbRecord: any) {
    return {
      id: dbRecord.id,
      tokenId: dbRecord.token_id,
      metadataUri: dbRecord.metadata_uri,
      owner: dbRecord.owner,
      metadata: dbRecord.metadata,
      createdAt: new Date(dbRecord.created_at),
      updatedAt: dbRecord.updated_at ? new Date(dbRecord.updated_at) : undefined,
    };
  }
}

export const databaseService = new DatabaseService();
```

### 5. Updated Wagmi Configuration

```typescript
// src/config/wagmi.ts
import { createConfig, http } from 'wagmi';
import { base } from 'wagmi/chains';
import { frameConnector } from '@farcaster/frame-wagmi-connector';

export const config = createConfig({
  chains: [base],
  transports: {
    [base.id]: http(),
  },
  connectors: [frameConnector()],
});
```

### 6. App.tsx with TanStack Query

```typescript
// src/App.tsx
import { WagmiProvider } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { config } from './config/wagmi';
import AppRouter from './router/AppRouter';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
    },
  },
});

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <AppRouter />
      </QueryClientProvider>
    </WagmiProvider>
  );
}

export default App;
```

## Key Compatibility Notes

1. **Ethers v6**: Uses `BrowserProvider` and `JsonRpcProvider` instead of v5's `providers` namespace
2. **Pinata SDK v2**: Uses direct methods like `pinJSONToIPFS` instead of axios
3. **Supabase v2**: Uses the new client initialization and type support
4. **Wagmi latest**: Uses the current API with `createConfig` and wagmi v2 patterns
5. **React 18**: All hooks and components are React 18+ compatible
6. **TypeScript 5**: Uses current TypeScript features and syntax

## Additional Required Types

```typescript
// src/types/database.types.ts (generated from Supabase)
export interface Database {
  public: {
    Tables: {
      evermarks: {
        Row: {
          id: string;
          token_id: string;
          metadata_uri: string;
          owner: string;
          metadata: any;
          created_at: string;
          updated_at?: string;
        };
        Insert: {
          token_id: string;
          metadata_uri: string;
          owner: string;
          metadata: any;
          created_at?: string;
        };
        Update: {
          metadata_uri?: string;
          metadata?: any;
          updated_at?: string;
        };
      };
    };
  };
}
```

## Updated Environment Variables

```bash
# .env.local
VITE_EVERMARK_NFT_ADDRESS=0x...
VITE_CARD_CATALOG_ADDRESS=0x...
VITE_PINATA_API_KEY=...
VITE_PINATA_SECRET_KEY=...
VITE_PINATA_GATEWAY=https://gateway.pinata.cloud
VITE_SUPABASE_URL=...
VITE_SUPABASE_ANON_KEY=...
VITE_RPC_URL=https://mainnet.base.org
```

All code examples are now compatible with the versions specified in your package.json!